################
#####F-Test#####
################
f.statistic = var(SAT.Fall)/var(SAT.Spring) #Manually calculating the F-statistic.
f.statistic
var.test(SAT.Fall, SAT.Spring, alternative = "two.sided") #Conducting the F-test to
#######################
#####One-Way ANOVA#####
#######################
set.seed(0)
Low.Calorie = rnorm(200, 10, 1) #Randomly generating weight loss measurements
Low.Carb = rnorm(200, 8.5, 1)   #for various diet types.
Low.Fat = rnorm(200, 8, 1)
Control = rnorm(200, 0, 1)
Weight.Loss = c(Low.Calorie, Low.Carb, Low.Fat, Control) #Combining data into
Category = c(rep("Low Calorie", 200),                    #different consolidated
rep("Low Carb", 200),                       #vectors.
rep("Low Fat", 200),
rep("Control", 200))
boxplot(Weight.Loss ~ Category,
col = c("red", "orange", "yellow", "green"),
main = "Distribution of Weight Loss\nfor Various Diets")
summary(aov(Weight.Loss ~ Category)) #Conducting the One-Way ANOVA on the weight
##################################
#####X^2 Test of Independence#####
##################################
quiz.data = matrix(c(44, 21, 12, 18), nrow = 2, ncol = 2, byrow = TRUE)
dimnames(quiz.data) = list(Attendance = c("Present", "Absent"),
Grade = c("Pass", "Fail"))
chisq.test(quiz.data) #Conducting the X^2 test of independence data on the quiz
quiz.data
########################################
#####Chick Weight Data Set Examples#####
########################################
library(datasets) #Load the base R datasets library.
help(chickwts) #See the help documentation for the chickwts dataset to see a
chickwts #Visually inspect the data.
summary(chickwts) #Returns the five-number summary, along with the mean,
sd(chickwts$weight) #Returns the standard deviation of the weight variable.
var(chickwts$weight) #Returns the variance of the weight variable.
table(chickwts) #Returns a contingency table of weight and feed.
plot(density(chickwts$weight), main = "Overall Distribution of Chick Weights")
abline(v = mean(chickwts$weight), lwd = 2, lty = 2)
abline(v = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
mean(chickwts$weight)
boxplot(chickwts$weight, main = "Overall Distribution of Chick Weights")
abline(h = mean(chickwts$weight), lwd = 2, lty = 2)
abline(h = 280, lwd = 2, lty = 2, col = "red")
legend("topright", c("True Mean = 261.3", "H0 Mean = 280"), lwd = 2,
lty = 2, col = c("black", "red"))
t.test(chickwts$weight, mu = 280, alternative = "less")
boxplot(chickwts$weight ~ chickwts$feed,
col = c("red", "orange", "yellow", "green", "blue", "violet"),
main = "Distribution of Chick Weights\nfor Various Feed Types")
summary(aov(chickwts$weight ~ chickwts$feed))
#We are specifically interested in the casein and meatmeal diet types. Do the
#reported chick weights have the same variance? To determine, conduct an F-test:
var.test(chickwts$weight[chickwts$feed == "casein"],
chickwts$weight[chickwts$feed == "meatmeal"],
alternative = "two.sided")
mymat = c(rnorm(n = 1000, mean = 0, sd = 1))
mymat
mymat = reshape(data = mymat, nrow = 100, ncol = 10)
?reshape
mymat = data.frame(c(rnorm(n = 1000, mean = 0, sd = 1)))
mymat = reshape(data = mymat, nrow = 100, ncol = 10)
mymat = matrix(c(rnorm(n = 1000, mean = 0, sd = 1)))
mymat = reshape(data = mymat, nrow = 100, ncol = 10)
mymat = data.frame(c(rnorm(n = 1000, mean = 0, sd = 1)))
mymat = reshape(data = mymat, nrow = 100, ncol = 10)
mymat
mymat = c(rnorm(n = 1000, mean = 0, sd = 1))
mymat = matrix(data = mymat, nrow = 100, ncol = 10)
mymat = c(rnorm(n = 100000, mean = 0, sd = 1))
mymat = matrix(data = mymat, nrow = 10, ncol = 10000)
mymatSq = mymat^2
chiSqVec = colSums(mymatSq)
hist(chiSqVec)
csvR = rchisq(10000,10)
hist(csvR, add = T)
hist(csvR, add = T, col = 'Red')
source('~/.active-rstudio-document', echo=TRUE)
hist(csvR, add = T, col = 'Red', alpha = .5)
hist(csvR, add = T, col = 'Red', alpha = .05)
hist(csvR, add = T, col = 'Red')
var.test(chiSqVec, csvR)
mymat2 = c(rnorm(n = 100000, mean = 0, sd = 1))
mymat2 = matrix(data = mymat, nrow = 20, ncol = 5000)
mymat2sq = mymat2^2
chSqvec2 = colSums(mymat2sq)
var.test(chiSqVec, chSqvec2)
mymat2 = c(rnorm(n = 100000, mean = 0, sd = 1))
mymat2 = matrix(data = mymat2, nrow = 20, ncol = 5000)
mymat2sq = mymat2^2
chSqvec2 = colSums(mymat2sq)
var.test(chiSqVec, chSqvec2)
Fsim = (chiSqVec/100000)/(chSqvec2/100000)
Fsim
hist(Fsim)
Fsim = (chiSqVec/10)/(chSqvec2/20)
hist(Fsim)
mean(Fsim)
var.test(chiSqVec, chSqvec2)
median(Fsim)
get_url <- function(year, quarter){
url = paste0(
"https://projects.propublica.org/congress/assets/staffers/",
year, quarter,
"-house-disburse-detail.csv"
)
return(url)
}
load_file_get_fname <- function(year, quarter){
url = get_url(year, quarter)
result = tryCatch(
{
print(paste0("Downloading for ", year, " ", quarter))
read.csv(url)
},
error = function(e) {
print(paste0("The url might not exist, no data for ", year, quarter, " is loaded."))
NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
get_url <- function(year, quarter){
url = paste0(
"https://projects.propublica.org/congress/assets/staffers/",
year, quarter,
"-house-disburse-detail.csv"
)
return(url)
}
load_file_get_fname <- function(year, quarter){
url = get_url(year, quarter)
result = tryCatch(
{
print(paste0("Downloading for ", year, " ", quarter))
read.csv(url)
},
error = function(e) {
print(paste0("The url might not exist, no data for ", year, quarter, " is loaded."))
NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
four_quarters = paste("Q", 1:4, sep = "")
for(year in 2009:2018){
for(quarter in four_quarters){
i = length(lst_fnames) + 1
fname = load_file_get_fname(year, quarter)
if(length(fname)!=0){
lst_fnames[i] = fname
}
}
}
get_url <- function(year, quarter){
url = paste0(
"https://projects.propublica.org/congress/assets/staffers/",
year, quarter,
"-house-disburse-detail.csv"
)
return(url)
}
load_file_get_fname <- function(year, quarter){
url = get_url(year, quarter)
result = tryCatch(
{
print(paste0("Downloading for ", year, " ", quarter))
read.csv(url)
},
error = function(e) {
print(paste0("The url might not exist, no data for ", year, quarter, " is loaded."))
NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
four_quarters = paste("Q", 1:4, sep = "")
for(year in 2009:2018){
for(quarter in four_quarters){
i = length(lst_fnames) + 1
fname = load_file_get_fname(year, quarter)
if(length(fname)!=0){
lst_fnames[i] = fname
}
}
}
write(lst_fnames, "data/lst_fnames.txt")
warnings()
get_url <- function(year, quarter){
url = paste0(
"https://projects.propublica.org/congress/assets/staffers/",
year, quarter,
"-house-disburse-detail.csv"
)
return(url)
}
load_file_get_fname <- function(year, quarter){
url = get_url(year, quarter)
result = tryCatch(
{
print(paste0("Downloading for ", year, " ", quarter))
read.csv(url)
},
error = function(e) {
print(paste0("The url might not exist, no data for ", year, quarter, " is loaded."))
NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
four_quarters = paste("Q", 1:4, sep = "")
for(year in 2009:2018){
for(quarter in four_quarters){
i = length(lst_fnames) + 1
fname = load_file_get_fname(year, quarter)
if(length(fname)!=0){
lst_fnames[i] = fname
}
}
}
get_url <- function(year, quarter){
url = paste0(
"https://projects.propublica.org/congress/assets/staffers/",
year, quarter,
"-house-disburse-detail.csv"
)
return(url)
}
load_file_get_fname <- function(year, quarter){
url = get_url(year, quarter)
result = tryCatch(
{
print(paste0("Downloading for ", year, " ", quarter))
read.csv(url)
},
error = function(e) {
print(paste0("The url might not exist, no data for ", year, quarter, " is loaded."))
NULL}
)
fname = paste0(year, "-", quarter, ".csv")
path = paste0("./data/", fname)
if(length(result)!=0){
write.csv(result, path, row.names = FALSE)
} else {
fname = NULL
}
return(fname)
}
lst_fnames = character()
four_quarters = paste("Q", 1:4, sep = "")
for(year in 2017:2018){
for(quarter in four_quarters){
i = length(lst_fnames) + 1
fname = load_file_get_fname(year, quarter)
if(length(fname)!=0){
lst_fnames[i] = fname
}
}
}
write(lst_fnames, "data/lst_fnames.txt")
x = pi/2
sin(x)
#2
HairEyeColor %>% filter(Gender == 'Female', Eye == 'Blue' | Eye == 'Brown')
library(dplyr)
#2
HairEyeColor %>% filter(Gender == 'Female', Eye == 'Blue' | Eye == 'Brown')
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
head(temp)
summary(temp)
library(dplyr)
group_by(temp, Gender) %>% summarise(mean(Body.Temp), sd(Body.Temp), mean(Heart.Rate), sd(Heart.Rate))
library(ggplot2)
ggplot(temp, aes(x = Body.Temp, y = Heart.Rate, color = Gender)) + geom_point() + geom_smooth(method = lm, se = F)
library(ggplot2)
ggplot(temp, aes(x = Body.Temp, y = Heart.Rate, color = Gender)) + geom_point() + geom_smooth(method = lm, se = F)
ggplot(temp, aes(x = Body.Temp, y = Heart.Rate, color = Gender)) + geom_point() + geom_smooth(method = lm, se = F)
cor(temp$Body.Temp, temp$Heart.Rate)
#3
t.test(temp$Body.Temp, mu = 98.6)
#4
t.test(filter(temp, Gender == 'Male')%>%select(Body.Temp),filter(temp, Gender == 'Female')%>%select(Body.Temp), alternative = 'two.sided')
MHR = temp %>% filter(Gender == 'Male')%>% select(Heart.Rate)
FHR = temp  %>% filter(Gender == 'Female')%>% select(Heart.Rate)
var.test(MHR, FHR, alternative = 'two.sided')
MHR = temp$Heart.Rate[temp$Gender == 'Male']
FHR = temp$Heart.Rate[temp$Gender == 'Female']
var.test(MHR, FHR, alternative = 'two.sided')
#5ab F-Test
#H0: Average(male body_temperature)=Average(female body_temperature)
#H1: Average(male body_temperature)<Average(female body_temperature)
# http://2012books.lardbucket.org/books/beginning-statistics/s15-chi-square-tests-and-f-tests.html
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "less")
var.test(MHR, FHR, alternative = 'two.sided')
var.test(MHR, FHR, alternative = 'more')
var.test(MHR, FHR, alternative = 'less')
var.test(FHR, MHR, alternative = 'less')
var.test(FHR, MHR, alternative = 'tow.sided')
var.test(FHR, MHR, alternative = 'two.sided')
library(datasets)
head(PlantGrowth)
summary(PlantGrowth)
ggplot(PlantGrowth, aes(x = group, y = weight)) + geom_boxplot()
#2
PlantGrowth %>% group_by(group) %>% summarise(sd(weight))
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
#3
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
#3
summary(aov(PlantGrowth$weight ~ PlantGrowth$group))
#1ab Visualizing the data with a mosaic plot.
# A mosaic plot is a graphical display that allows you to
# examine the relationship among two or more categorical variables.
mosaicplot(HairEyeColor, shade = TRUE)
str(HairEyeColor)
#1ab Visualizing the data with a mosaic plot.
# A mosaic plot is a graphical display that allows you to
# examine the relationship among two or more categorical variables.
mosaicplot(HairEyeColor, shade = TRUE)
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
#2a Reducing the dataset to all hair colors, brown & blue eye colors, and just
#females.
reduced = HairEyeColor[,1:2,2]
#Chi-Squared test of independence.
reduced.test = chisq.test(reduced)
reduced.test
str(HairEyeColor)
reduced.test$observed - reduced.test$expected
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
EIU = read.csv(EIU.csv)
pwd
getwd()
EIU = read.csv(EIU.csv)
EIU = read.csv('EIU.csv')
head(EIU)
?gather
library(dplyr)
?gather
library(tidyr)
?gather
?separate
?spread
?gather
LEIU = gather(EIU, index, score, EIU17VA:EIU96CC, factor_key = TRUE)
eiu = EIU[3:,]
eiu = EIU[3:]
eiu = EIU[3:, ]
head(LEIU)
LEIU
eiu <- EIU[3:, ]
eiu = EIU[3:200, ]
LEIU = gather(eiu, index, score, EIU17VA:EIU96CC, factor_key = TRUE)
head(LEIU)
LEIU
eiu = EIU[3:nrow(EIU), ]
LEIU = gather(eiu, index, score, EIU17VA:EIU96CC, factor_key = TRUE)
LEIU
?colnames
colnames(LEIU)[1] = "Country"
head(LEIU)
?grep
LEIU$year = LEIU$index[4:5]
head(LEIU)
LEIU$year = LEIU$index[4]
head(LEIU)
LEIU = gather(eiu, index, score, EIU17VA:EIU96CC, factor_key = FALSE)
colnames(LEIU)[1] = "Country"
LEIU$year = LEIU$index[4]
head(LEIU)
LEIU$year = LEIU$index[4:5]
head(LEIU)
LEIU$year = substr(LEIU$index,4,5)
head(LEIU)
LEIU$measure = substr(LEIU$index, 6,7)
head(LEIU)
?replace
measure_list = c('VA','PV','GE','RQ','RL','CC')
measure_list_rep = c('Voice and Accountability',
'Political Stability and Absence of Violence',
'Government Effectiveness',
'Regulatory Quality',
'Rule of Law',
'Control of Corruption')
replace(LEIU$measure, measure_list, measure_list_rep)
head(LEIU)
LEIU = replace(LEIU$measure, measure_list, measure_list_rep)
head(LEIU)
LEIU = gather(eiu, index, score, EIU17VA:EIU96CC, factor_key = FALSE)
colnames(LEIU)[1] = "Country"
LEIU$year = substr(LEIU$index,4,5)
LEIU$measure = substr(LEIU$index, 6,7)
head(LEIU)
setwd("~/Downloads/EIU_shiny")
?write.csv
write.csv(LEIU, 'leiu')
write.csv(LEIU, 'leiu.csv')
data = read.csv('leiu.csv')
head(data)
data = data[-1,]
head(data)
data = read.csv('leiu.csv')
data = data[,-1]
head(data)
library(shinydashboard)
library(googleVis)
library(shiny); runApp('~/Downloads/dashboard_lecture.R')
runApp()
runApp()
runApp()
runApp('~/Downloads/dashboard_lecture.R')
runApp()
>gvisgeochart
?gvisGeoChart
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
runApp()
runApp()
head(LEIU)
runApp()
head(eiu)
colnames(eiu)[1] = "Country"
write.csv(eiu,'eiu.csv')
data = read.csv('eiu.csv')
head(data)
head(data)
data = data[,-1]
runApp()
runApp()
chooseYear
?seq
chooseYear = seq(1996,2017)
chooseYear
runApp()
runApp()
library(dplyr)
?case_when
runApp()
runApp()
?substr
runApp()
runApp()
runApp('~/Downloads/dashboard_lecture.R')
runApp()
.875*96
29/.875
runApp()
runApp()
runApp()
runApp()
runApp()
head(LEIU)
head(data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
